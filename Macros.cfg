

#####################################################################
#   Macros
#####################################################################

#[gcode_macro test_speed_fast]
#gcode:
#        G28 X0 Y0
#        GET_POSITION
#        G1 X5 Y5     F27000
#        G1 X340 Y340 F27000
#        G1 X5 Y5     F27000
#        G1 X330 Y340 F27000
#
#       G1 X30 Y340 F36000
#        G1 X340 Y5 F27000
#        G1 X30 Y340 F27000
#        G1 X340 Y25 F27000
#        G1 X30 Y340 F27000

#        G1 X5 Y5 F36000
#        G1 X340 Y5 F36000
#        G1 X340 Y340 F36000
#        G1 X30 Y340 F36000
#        G1 X30 Y5 F36000
#        G28 X5 Y5
#        GET_POSITION

#####################################################################



[gcode_macro G32]
gcode:
   G28
    M401
    QUAD_GANTRY_LEVEL
    M402 
   G28 
    STATUS_HOMING
    ##  Uncomment for 350mm build
    G0 X175 Y175 Z30 F3600
    STATUS_READY
    #--------------------------------------------------------------------
   
[gcode_macro PRINT_START]
#   Use PRINT_START for the slicer starting script
gcode:
      # Parameters
    {% set bedtemp = params.BED|int %}
    {% set hotendtemp = params.HOTEND|int %}
    
  G90 #set absolute positioning
  G28 #home all axis
  STATUS_HOMING
  STATUS_READY
  PREHEAT
  STATUS_HEATING
  M190 S{bedtemp}          ; set & wait for bed temp
  STATUS_READY
  STATUS_LEVELING
  QUAD_GANTRY_LEVEL #V2.4
  STATUS_READY
  #BED_MESH_CALIBRATE PRINT_MIN={params.PRINT_MIN} PRINT_MAX={params.PRINT_MAX} FORCE_NEW_MESH=True
  BED_MESH_CALIBRATE PRINT_MIN={params.PRINT_MIN} PRINT_MAX={params.PRINT_MAX}
  STATUS_BUSY
  Smart_Park
  G0 Z20
  M109 S{hotendtemp}
  STATUS_CLEANING
  CLEAN_NOZZLE
  LINE_PURGE
  STATUS_READY
  STATUS_PRINTING
  #Adaptive_Purge

#######################################################################################
   
[gcode_macro PREHEAT]
gcode:
  G90 #set absolute positioning
  G28 #home all axis
  
  ## Move hotend a sufficent distance from heated bed for heat soak
  #--------------------------------------------------------------------
  #G0 X125 Y125 Z50 F3600 ## Uncomment for 250mm build
  #G0 X150 Y150 Z50 F3600 ## Uncomment for 300mm build
  G0 X175 Y175 Z50 F3600 ## Uncomment for 350mm build
  #--------------------------------------------------------------------
  #M106 S255 #set parts fan to full speed, helps circulate chamber air
  STATUS_HEATING
  SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=105 #For ABS
  STATUS_READY


[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
    
    # safe anti-stringing move coords
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}
    
    SAVE_GCODE_STATE NAME=STATE_PRINT_END
    
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-5.0 F1800                 ; retract filament
    G91
    G1 Z10 F3000
    STATUS_COOLING
    TURN_OFF_HEATERS
    
    G90                                      ; absolute positioning
    G0 X{x_safe} Y{y_safe} Z{z_safe} F2000  ; move nozzle to remove stringing
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600  ; park nozzle at rear
    M107                                     ; turn off fan
    
    BED_MESH_CLEAR
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END
    STATUS_READY

#############################################################################



####################################
[gcode_macro TOOL_HEAD_CENTER]
gcode:
    G1 X175 Y175 Z40 F10000

####################################

[gcode_macro TOOL_HEAD_FRONT]
gcode:
    G1 X175 Y50.00 Z60 F15000
  STATUS_PRINTING

######################################################################
# Filament Change
###################################################################### 

# M600: Filament Change. This macro will pause the printer, move the
# tool to the change position, and retract the filament 50mm. Adjust
# the retraction settings for your own extruder. After filament has
# been changed, the print can be resumed from its previous position
# with the "RESUME" gcode.

#[pause_resume]

#[gcode_macro M600]
#gcode:
#    {% set X = params.X|default(50)|float %}
#    {% set Y = params.Y|default(0)|float %}
#    {% set Z = params.Z|default(10)|float %}
#    SAVE_GCODE_STATE NAME=M600_state
#    PAUSE
#    G91
#    G1 E-.8 F2700
#    G1 Z{Z}
#    G90
#    G1 X{X} Y{Y} F3000
#    G91
#    G1 E-50 F1000
#    RESTORE_GCODE_STATE NAME=M600_state

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    {% set z = params.Z|default(10)|int %}                                                   ; z hop amount
    {% set x = params.X|default(230)|int %}                                                   ; x park pos
    {% set y = params.Y|default(230)|int %}                                                   ; y park pos
    {% set sync_motors = params.SYNC_MOTORS|default(0)|int %}
    {% if printer['pause_resume'].is_paused|int == 0 %}     
        SET_IDLE_TIMEOUT TIMEOUT=43200                                                       ; set timeout to 12 hours
        {% if sync_motors == 1 %}
            G1 X10 Y10 Z10 F16500   ; park toolhead
            SAVE_GCODE_STATE NAME=PAUSESYNC                                                      ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error) 
            BASE_PAUSE
            MOTORS_SYNC
        {% else %}
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                              ; set z hop variable for reference in resume macro
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}    ; set hotend temp variable for reference in resume macro
            SAVE_GCODE_STATE NAME=PAUSE                                                          ; save current print position for resume                
            BASE_PAUSE                                                                           ; pause print
            {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}       ; check that zhop doesn't exceed z max
                G91                                                                              ; relative positioning
                G1 Z{z} F900                                                                     ; raise Z up by z hop amount
            {% else %}
                { action_respond_info("Pause zhop exceeds maximum Z height.") }                  ; if z max is exceeded, show message and set zhop value for resume to 0
                SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
            {% endif %}
            G90                                                                                  ; absolute positioning
            G1 X{x} Y{y} F16500   ; park toolhead
            SAVE_GCODE_STATE NAME=PAUSEPARK
            M104 S0                                                                              ; turn off hotend
        {% endif %}    
    {% endif %}

[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
    {% set e = params.E|default(5)|int %}
    {% set sync_motors = params.SYNC_MOTORS|default(0)|int %}
    SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}  ; set timeout back to configured value
    {% if printer['pause_resume'].is_paused|int == 1 %}
        {% if sync_motors == 1 %} 
            RESTORE_GCODE_STATE NAME=PAUSESYNC MOVE=1 MOVE_SPEED=275                     ; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)  
        {% else %}
            {% if etemp > 0 %}
                M109 S{etemp|int}                                                        ; wait for hotend to heat back up
            {% endif %}
            RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=275                     ; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)  
            G91                                                                          ; relative positioning
            M83                                                                          ; relative extruder positioning
            {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}                                                
                G1 Z{zhop * -1} E{e} F900                                                ; prime nozzle by E, lower Z back down
            {% else %}                      
                G1 Z{zhop * -1} F900                                                     ; lower Z back down without priming (just in case we are testing the macro with cold hotend)
            {% endif %}                             
            RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=275                          ; restore position
        {% endif %}
        BASE_RESUME                                                                  ; resume print
    {% endif %}

[gcode_macro M600]
gcode:
    PAUSE X=117.5 Y=5 ;parking position for filament change

###############################
########################################################################################################

# Home, get position, throw around toolhead, home again.
# If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# We only measure to a full step to accomodate for endstop variance.
# Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10

[gcode_macro TEST_SPEED]
gcode:
	# Speed
	{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
	# Iterations
	{% set iterations = params.ITERATIONS|default(5)|int %}
	# Acceleration
	{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
	# Bounding inset for large pattern (helps prevent slamming the toolhead into the sides after small skips, and helps to account for machines with imperfectly set dimensions)
	{% set bound = params.BOUND|default(20)|int %}
	# Size for small pattern box
	{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
	
	# Large pattern
		# Max positions, inset by BOUND
		{% set x_min = printer.toolhead.axis_minimum.x + bound %}
		{% set x_max = printer.toolhead.axis_maximum.x - bound %}
		{% set y_min = printer.toolhead.axis_minimum.y + bound %}
		{% set y_max = printer.toolhead.axis_maximum.y - bound %}
	
	# Small pattern at center
		# Find X/Y center point
		{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
		{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
		
		# Set small pattern box around center point
		{% set x_center_min = x_center - (smallpatternsize/2) %}
		{% set x_center_max = x_center + (smallpatternsize/2) %}
		{% set y_center_min = y_center - (smallpatternsize/2) %}
		{% set y_center_max = y_center + (smallpatternsize/2) %}

	# Save current gcode state (absolute/relative, etc)
	SAVE_GCODE_STATE NAME=TEST_SPEED
	
	# Output parameters to g-code terminal
	{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }

	# Absolute positioning
	G90
	
	# Set new limits
	SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}

	# Home and get position for comparison later:
		G28
		# QGL if not already QGLd (only if QGL section exists in config)
		{% if printer.configfile.settings.quad_gantry_level %}
			{% if printer.quad_gantry_level.applied == False %}
				QUAD_GANTRY_LEVEL
				G28 Z
			{% endif %}
		{% endif %}	
		G0 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y} F{30*60}
		G4 P1000 
		GET_POSITION

	# Go to starting position
	G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}

	{% for i in range(iterations) %}
		# Large pattern
			# Diagonals
			G0 X{x_min} Y{y_min} F{speed*60}
			G0 X{x_max} Y{y_max} F{speed*60}
			G0 X{x_min} Y{y_min} F{speed*60}
			G0 X{x_max} Y{y_min} F{speed*60}
			G0 X{x_min} Y{y_max} F{speed*60}
			G0 X{x_max} Y{y_min} F{speed*60}
			
			# Box
			G0 X{x_min} Y{y_min} F{speed*60}
			G0 X{x_min} Y{y_max} F{speed*60}
			G0 X{x_max} Y{y_max} F{speed*60}
			G0 X{x_max} Y{y_min} F{speed*60}
		
		# Small pattern
			# Small diagonals 
			G0 X{x_center_min} Y{y_center_min} F{speed*60}
			G0 X{x_center_max} Y{y_center_max} F{speed*60}
			G0 X{x_center_min} Y{y_center_min} F{speed*60}
			G0 X{x_center_max} Y{y_center_min} F{speed*60}
			G0 X{x_center_min} Y{y_center_max} F{speed*60}
			G0 X{x_center_max} Y{y_center_min} F{speed*60}
			
			# Small box
			G0 X{x_center_min} Y{y_center_min} F{speed*60}
			G0 X{x_center_min} Y{y_center_max} F{speed*60}
			G0 X{x_center_max} Y{y_center_max} F{speed*60}
			G0 X{x_center_max} Y{y_center_min} F{speed*60}
	{% endfor %}

	# Restore max speed/accel/accel_to_decel to their configured values
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 

	# Re-home and get position again for comparison:
		G28
		# Go to XY home positions (in case your homing override leaves it elsewhere)
		G0 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y} F{30*60}
		G4 P1000 
		GET_POSITION

	# Restore previous gcode state (absolute/relative, etc)
	RESTORE_GCODE_STATE NAME=TEST_SPEED

######################################################################################

[gcode_macro m300]
description: Emits and audible beep.
  Usage: M300 [P<duration>] [S<frequency>]
gcode:
  {% set km = printer["gcode_macro _km_globals"] %}
  {% if "output_pin beeper" in printer %}
    {% set P = (params.P|default(km.beep_duration)|int, 0)|max %}
    {% set S = (params.S|default(km.beep_frequency)|int, 1)|max %}
    SET_PIN PIN=beeper VALUE={
        printer.configfile.settings["output_pin beeper"].scale * 0.5
      } CYCLE_TIME={ 1.0 / S }
    G4 P{P}
    SET_PIN PIN=beeper VALUE=0
  {% else %}
    {action_respond_info(
       "M300 is disabled. To enable create an [output_pin beeper] config.")}
  {% endif %}

##########################################################################################

